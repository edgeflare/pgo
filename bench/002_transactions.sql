-- benchmark table
CREATE TABLE IF NOT EXISTS transactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id TEXT REFERENCES iam.users(sub) ON DELETE CASCADE,
    transaction_date TIMESTAMPTZ NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    transaction_type VARCHAR(20) NOT NULL,
    category VARCHAR(50) NOT NULL,
    merchant_name VARCHAR(100),
    payment_method VARCHAR(30) NOT NULL,
    status VARCHAR(20) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- indexes for better query performance
CREATE INDEX idx_user_id ON transactions(user_id);
CREATE INDEX idx_transaction_date ON transactions(transaction_date);
CREATE INDEX idx_amount ON transactions(amount);
CREATE INDEX idx_status ON transactions(status);
CREATE INDEX idx_category ON transactions(category);

-- GRANT and Row Level Security (RLS)
GRANT SELECT,INSERT,UPDATE,DELETE ON transactions TO authn;

-- RLS
ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;

CREATE POLICY insert_own_tx ON transactions FOR INSERT
WITH CHECK (user_id = iam.user_jwt_sub());

CREATE POLICY select_own_tx ON transactions FOR SELECT
USING (user_id = iam.user_jwt_sub());

CREATE POLICY update_own_tx ON transactions FOR UPDATE
USING (user_id = iam.user_jwt_sub())
WITH CHECK (user_id = iam.user_jwt_sub());

CREATE POLICY delete_own_tx ON transactions FOR DELETE
USING (user_id = iam.user_jwt_sub());

CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions(user_id);
