# change the IP address 192.168.0.121 to your local IP address or hostname
# in dex-config.yaml, pgo-config.yaml, and example-app container
services:
  db-postgresql:
    image: docker.io/bitnami/postgresql:17.4.0
    environment:
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespw
      POSTGRES_DB: main
      POSTGRESQL_WAL_LEVEL: logical
    ports:
    - 5432:5432
    volumes:
    - db-postgresql:/bitnami/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  init-db-postgresql:
    image: docker.io/bitnami/postgresql:17.4.0
    environment:
      PGHOST: db-postgresql
      PGUSER: postgres
      PGPASSWORD: postgrespw
      PGDATABASE: main
    depends_on:
      db-postgresql:
        condition: service_healthy
    entrypoint:
    - /bin/bash
    - -c
    - |
      echo "Waiting for PostgreSQL to be ready..."
      until PGPASSWORD=postgrespw psql -h db-postgresql -U postgres -c '\q'; do
        echo "PostgreSQL is unavailable - sleeping"
        sleep 2
      done
      echo "PostgreSQL is up - executing SQL"
      psql -c "
        DO \$\$
        BEGIN
          IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'dex') THEN CREATE ROLE dex WITH LOGIN PASSWORD 'dexpw'; END IF;
          IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'pgo') THEN CREATE ROLE pgo WITH LOGIN PASSWORD 'pgopw'; END IF;
          IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'authn') THEN CREATE ROLE authn NOLOGIN; END IF;
          IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'anon') THEN CREATE ROLE anon NOLOGIN; END IF;
          GRANT anon TO authn;
          GRANT authn to pgo;
        END
        \$\$;
      "
      psql -c "CREATE DATABASE dex;" || true
      psql -c "ALTER DATABASE dex OWNER TO dex;"
      
      # Create completion flag file
      touch /tmp/init-complete
      
      # Keep the container running
      echo "Init complete, keeping container alive for dependencies"
      tail -f /dev/null
    restart: on-failure
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/init-complete"]
      interval: 2s
      timeout: 5s
      retries: 5
      start_period: 10s

  iam-dex:
    image: ghcr.io/edgeflare/dex:latest
    restart: always
    command: 'dex serve /config.yaml'
    environment:
      DEX_CUSTOM_CLAIMS_STATIC: '{"policy": {"pgrole": "authn"}}'
    ports:
    - 5556:5556
    volumes:
    - $PWD/dex-config.yaml:/config.yaml:rw,Z
    depends_on:
      db-postgresql:
        condition: service_healthy
      init-db-postgresql:
        condition: service_healthy
    healthcheck: # doesn't work. curl/wget not installed in dex image
        test: ["CMD-SHELL", "wget -q --spider http://localhost:5556/healthz/live || curl -f http://localhost:5556/healthz/live || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 3
        start_period: 15s

  pgo-rest:
    image: ghcr.io/edgeflare/pgo # or docker.io/postgrest
    command: [rest, --config, /rest/config.yaml]
    ports:
    - 8001:8001
    volumes:
    - $PWD/pgo-config.yaml:/rest/config.yaml:rw,Z
    depends_on:
      db-postgresql:
        condition: service_healthy
      init-db-postgresql:
        condition: service_healthy
      # iam-dex:
      #  condition: service_healthy
    restart: on-failure

  pgo-pipeline: # sync-users-from-dex-to-main
    image: ghcr.io/edgeflare/pgo
    command: [pipeline, --config, /pipeline/config.yaml]
    volumes:
    - $PWD/pgo-config.yaml:/pipeline/config.yaml:rw,Z
    depends_on:
      db-postgresql:
        condition: service_healthy
      init-db-postgresql:
        condition: service_healthy
      # iam-dex:
      #  condition: service_healthy

  # # optional: for benchmarking / testing, pgo showed 16k TPS on my Mac while PostgrREST peakeds 1.2k TPS
  # postgrest:
  #   image: docker.io/postgrest/postgrest:v12.2.3
  #   ports:
  #   - "3000:3000"
  #   environment:
  #     PGRST_DB_URI: postgres://pgo:pgopw@db-postgresql:5432/main
  #     PGRST_OPENAPI_SERVER_PROXY_URI: http://0.0.0.0:3000
  #     PGRST_DB_ANON_ROLE: anon
  #     PGRST_LOG_LEVEL: debug
  #     PGRST_DB_SCHEMA: public,iam
  #   depends_on:
  #     postgres-source:
  #       condition: service_healthy

  example-app: # for obtaining an OAuth2 token from Dex
    image: docker.io/golang:1.24-alpine
    ports:
    - 5555:5555
    entrypoint:
    - /bin/sh
    - -c
    - |
      go install github.com/dexidp/dex/examples/example-app@latest
      example-app --issuer http://192.168.0.121:5556/dex --client-id oauth2-proxy --listen http://0.0.0.0:5555
    depends_on:
      db-postgresql:
        condition: service_healthy
      init-db-postgresql:
        condition: service_healthy
      # iam-dex:
      #  condition: service_healthy
    restart: on-failure

volumes:
  db-postgresql:
